import { writeFileSync } from 'fs';
import { join } from 'path';
import { DEFAULT_PAGE_EXTENSIONS } from './constants.js';
import { findFiles, getPagesDirectory } from './utils.js';

const NEXTJS_NON_ROUTABLE = ['/_app', '/_document', '/_error', '/middleware'];
const DYNAMIC_SEGMENT_RE = /\[(.*?)\]/g;

type QueryType = 'dynamic' | 'catch-all' | 'optional-catch-all';

interface Route {
  pathname: string;
  query: Record<string, QueryType>;
}

/**
 * For a given page path, this function ensures that there is no backslash
 * escaping slashes in the path. Example:
 *  - `foo\/bar\/baz` -> `foo/bar/baz`
 * Taken from: https://github.com/vercel/next.js/blob/963585a4fcbc7af68dae759a96936f9973d861c2/packages/next/shared/lib/page-path/normalize-path-sep.ts
 */
export function normalizePathSep(path: string): string {
  return path.replace(/\\/g, '/');
}

/**
 * For a given page path removes the provided extensions.
 * Taken from: https://github.com/vercel/next.js/blob/0796b6faa991cd58a517b0f160320e9978208066/packages/next/build/entries.ts#L47
 */
function getPageFromPath(pagePath: string, pageExtensions: string[]) {
  let page = normalizePathSep(
    pagePath.replace(new RegExp(`\\.+(${pageExtensions.join('|')})$`), '')
  );

  page = page.replace(/\/index$/, '');

  return page === '' ? '/' : page;
}

export function nextRoutes(
  files: string[],
  pagesDirectory: string,
  pageExtensions: string[]
): Route[] {
  const pathnames = files
    // remove page directory path
    .map((file) => file.replace(pagesDirectory, ''))
    // remove file extension
    .map((file) => getPageFromPath(file, pageExtensions))
    // remove trailing slash, if present
    .map((file) =>
      file.endsWith('/') && file.length > 2 ? file.slice(0, -1) : file
    )
    // exclude nextjs special routes
    .filter((file) => !NEXTJS_NON_ROUTABLE.includes(file));

  return pathnames.map((pathname) => {
    const segments = pathname.match(DYNAMIC_SEGMENT_RE) ?? [];
    const query = segments.reduce<Route['query']>((acc, cur) => {
      const param = cur
        .replace(/\[/g, '')
        .replace(/\]/g, '')
        .replace('...', '');
      let queryType: QueryType = 'dynamic';
      if (cur.startsWith('[[')) {
        queryType = 'optional-catch-all';
      } else if (cur.startsWith('[...')) {
        queryType = 'catch-all';
      }
      acc[param] = queryType;
      return acc;
    }, {});

    return {
      pathname,
      query,
    };
  });
}

function getQueryInterface(
  query: Route['query']
): [query: string, requiredKeys: number] {
  let requiredKeys = 0;
  const keys = Object.entries(query)
    .map(([key, value]) => {
      switch (value) {
        case 'dynamic': {
          requiredKeys += 1;
          return `"${key}": string`;
        }
        case 'catch-all': {
          requiredKeys += 1;
          return `"${key}": string[]`;
        }
        case 'optional-catch-all': {
          return `"${key}"?: string[] | undefined`;
        }
        // istanbul ignore next
        default: {
          const _exhaust: never = value;
          return _exhaust;
        }
      }
    })
    .join('; ');

  return [`{ ${keys} }`, requiredKeys];
}

function generate(routes: Route[]): string {
  const unknownQueryParamsType =
    '{ [key: string]: string | string[] | undefined }';
  return `\
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Run \`npx nextjs-routes\` to regenerate this file.
/* eslint-disable */

// prettier-ignore
declare module "nextjs-routes" {
  export type Route =
    ${
      !routes.length
        ? 'never'
        : `| ${routes
            .map((route) => {
              const [query, requiredKeys] = getQueryInterface(route.query);
              if (requiredKeys > 0) {
                return `{ pathname: "${route.pathname}"; query: Query<${query}> }`;
              } else {
                return `{ pathname: "${route.pathname}"; query?: Query | undefined }`;
              }
            })
            .join('\n    | ')}`
    };

  type Query<Params = {}> = Params & ${unknownQueryParamsType};
}

// prettier-ignore
declare module "next/link" {
  import type { Route } from "nextjs-routes";
  import type { LinkProps as NextLinkProps } from "next/dist/client/link";
  import type { PropsWithChildren, MouseEventHandler } from "react";
  export * from "next/dist/client/link";

  type RouteOrQuery = Route | { query?: ${unknownQueryParamsType} };

  export interface LinkProps extends Omit<NextLinkProps, "href"> {
    href: RouteOrQuery;
  }

  declare function Link(
    props: PropsWithChildren<LinkProps>
  ): DetailedReactHTMLElement<
    {
      onMouseEnter?: MouseEventHandler<Element> | undefined;
      onClick: MouseEventHandler;
      href?: string | undefined;
      ref?: any;
    },
    HTMLElement
  >;

  export default Link;
}

// prettier-ignore
declare module "next/router" {
  import type { Route } from "nextjs-routes";
  import type { NextRouter as Router } from "next/dist/client/router";
  export * from "next/dist/client/router";
  export { default } from "next/dist/client/router";

  type TransitionOptions = Parameters<Router["push"]>[2];

  type Pathname = Route["pathname"];

  type QueryForPathname = {
    [K in Route as K["pathname"]]: Exclude<K["query"], undefined>;
  };

  type RouteOrQuery = Route | { query: ${unknownQueryParamsType} };

  export interface NextRouter<P extends Pathname = Pathname>
    extends Omit<Router, "push" | "replace"> {
    pathname: P;
    route: P;
    query: QueryForPathname[P];
    push(
      url: RouteOrQuery,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    replace(
      url: RouteOrQuery,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
  }

  export function useRouter<P extends Pathname>(): NextRouter<P>;
}
`;
}

const logger: Pick<Console, 'error'> = {
  error: (str: string) => console.error('[nextjs-routes] ' + str),
};

export function writeNextjsRoutes(
  pagesDirectory: string,
  pageExtensions: string[] = DEFAULT_PAGE_EXTENSIONS
): void {
  const files = findFiles(join('.', pagesDirectory), pageExtensions);
  const routes = nextRoutes(files, pagesDirectory, pageExtensions);
  const generated = generate(routes);

  writeFileSync('nextjs-routes.d.ts', generated);
}

export function cli(): void {
  const pagesDirectory = getPagesDirectory();
  if (!pagesDirectory) {
    logger.error(`Could not find a Next.js pages directory. Expected to find either pages(1) or src/pages(2).

  1. https://nextjs.org/docs/basic-features/pages
  2. https://nextjs.org/docs/advanced-features/src-directory
  `);
    process.exit(1);
  } else {
    writeNextjsRoutes(pagesDirectory);
  }
}
